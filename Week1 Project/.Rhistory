m
m = subset(mydata, v3 > 10);
m = subset(mydata, V3 > 10);
m = subset(mydata, V3 == 10);
m
m = subset(mydata, V3 < 10);
m = subset(mydata, V3 == 800);
m
m = subset(mydata, V3 >> 800);
m = subset(mydata, V3 > 800);
m = subset(mydata, V3 < 800);
m
m = subset(mydata, V3 > 800);
m
m = subset(mydata, V3 > 800,);
m
m = subset(mydata, V3 > 800);;
m = subset(mydata, as.numeric(V3) > 800);;
m = subset(mydata, as.numeric(V3) > 800);
m
m = subset(mydata, as.numeric(V3) == 800);
m
m = subset(mydata, V3 == 800);
m
m = subset(mydata, V3 > as.character(800);
m = subset(mydata, V3 > as.character(800));
m
plot(mydata$V3)
hist(mydata$V3)
hist(as.numeric(mydata$V3))
plot(as.numeric(mydata$V3))
m = subset(mydata, V3 > as.character(800));
m
mydata[-(1:3)]
mydata[-(mydata$V3<10)]
mydata[-(mydata$V3<10), c()]
mydata[-(mydata$V3 < 10), c()]
mydata[, -(1:3)]
mydata[-(1:3), ]
mydata[-(1:100), ]
mydata[-(mydata$V3 < 10), ]
mydata[-(mydata$V3 < 10), ]
mydata[-(mydata$V3 < 10)]
mydata[,-(mydata$V3 < 10)]
m = subset(mydata, (V3 > as.character(800)));
m
m$v1
m = subset(mydata, (V3 == as.character(800)));
m
m = subset(mydata, !(V3 == 10);
m = subset(mydata, !(V3 == 10));
m
m = subset(mydata, !(V3 === 10));
m = subset(mydata, !(V3 == 10));
area_log = log10(log10(m$V3));
area_log = log10(log10(as.numeric(m$V3)));
area_log
popul_log = log10(log10(m$V2)
)
popul_log = log10(log10(as.numeric(m$V2))))
popul_log = log10(log10(as.numeric(m$V2)))
plot(area_log, popul_log)
lm(area_log, popul_log)
lm(area_log~popul_log)
plot(lm(area_log~popul_log))
plot(lm(area_log~popul_log))
plot(lm(area_log~popul_log)$coeff)
(lm(area_log~popul_log)$coeff)
plot(lm(popul_log~area_log)$coeff)
plot(lm(popul_log~area_log))
l = lm(popul_log~area_log)
plot(l)
source('~/.active-rstudio-document')
HairEyeColor
men <- HairEyeColor[, , "Female"]
women <- HairEyeColor[, , "Female"]
wonew
wonen
women
mosaicplot(women, col = c("chocolate", "cornflowerblue", "salmon", "green"), main = "Female eye color vs. hair color")
chisq.test(women, simulate.p.value = TRUE)
source('~/.active-rstudio-document')
source('D:/Dropbox/Projects/Machine Learning/Lab2/Hair.r')
chi = chisq.test(women, simulate.p.value = TRUE);
source('D:/Dropbox/Projects/Machine Learning/Lab2/Hair.r')
source('D:/Dropbox/Projects/Machine Learning/Lab2/Hair.r')
source('D:/Dropbox/Projects/Machine Learning/Lab2/Hair.r')
chi$p.value > 0.05
source('D:/Dropbox/Projects/Machine Learning/Lab2/Hair.r')
source('D:/Dropbox/Projects/Machine Learning/Lab2/Hair.r')
source('D:/Dropbox/Projects/Machine Learning/Lab2/Hair.r')
source('D:/Dropbox/Projects/Machine Learning/Lab2/Hair.r')
source('~/.active-rstudio-document')
source('D:/Dropbox/Projects/Machine Learning/Lab2/Hair.r')
source('D:/Dropbox/Projects/Machine Learning/Lab2/Hair.r')
source('D:/Dropbox/Projects/Machine Learning/Lab2/Hair.r')
source('D:/Dropbox/Projects/Machine Learning/Lab2/Hair.r')
mydata = read.table("D:/Dropbox/Projects/Machine Learning/Lab2/readingspeed.txt");
mydata
subset(mydata, as.character(V2) == as.character("SC"))
sc= subset(mydata, as.character(V2) == as.character("SC"))
dra= subset(mydata, as.character(V2) == as.character("DRA"))
t.test(sc, dra)
t.test(as.numeric(sc), as.numeric(dra)
)
t.test(as.numeric(sc), as.numeric(dra));
t.test(as.double(sc), as.double(dra));
t.test(as.double(sc), as.double(dra));
as.double(sc)
as.numeric(sc)
sc$V1
t.test(as.double(sc$V1), as.double(dra$V1));
t.test(as.double(sc$V1), as.double(dra$V1), alternative = "less");
t.test(as.double(sc$V1), as.double(dra$V1), alternative = "greater");
t.test(as.double(sc$V1), as.double(dra$V1), alternative = "less");
source('D:/Dropbox/Projects/Machine Learning/Lab2/Reading.r')
source('D:/Dropbox/Projects/Machine Learning/Lab2/Reading.r')
source('D:/Dropbox/Projects/Machine Learning/Lab2/Reading.r')
source('D:/Dropbox/Projects/Machine Learning/Lab2/Reading.r')
source('D:/Dropbox/Projects/Machine Learning/Lab2/Reading.r')
x <- 4
class(x)
x <- c(4, "a", TRUE)
class(x)
x = vector(3 4 5 6 7)
x = vector(1:4)
x <- vector(1:4)
x <- vector("num,"1:4)
x <- vector("num", 1:4)
x <- vector("num", length=4)
x <- vector("numeric", length=4)
x[3 = 5]
x[3] = 5
x[3]
x[3][1]
x[3][1][1]
attribytes(x)
attributes(x)
x$
d
x$dim
x$dimention
x <- list(2, "a", "b", TRUE)
x[[2]]
class(x[[2]])
x = 1:4
y = 2:3
x+y
airquality
airquality[1:2]
airquality[,1:2]
airquality[, 1:2]
airquality
airquality[кщц = 2]
airquality[row = 2]
airquality[2]
airquality[, 2]
airquality[, 1:2]
airquality[1, 1:2]
airquality[1:2, ]
airquality[152:153, ]
airquality[47, 1]
is.na(airquality[1])
sum(is.na(airquality[1]))
mean(airquality[1])
mean(as.numeric(airquality[1])
)
mean(as.double(airquality[1]))
mean(as.double(airquality[1][!is.na()]))
mean(as.double(airquality[1][!is.na(airquality[1])]))
mean(as.double((airquality[1]>31 && airquality[3]>90)[airquality[2][!is.na(airquality[1])]]))
s = airquality[1]>31
s
s = airquality[airquality[1]>31 && aiquality[4]>90]
s = airquality[airquality[1]>31 && airquality[4]>90]
s
s = airquality[airquality[1]>31 and airquality[4]>90]
s = airquality[airquality[1]>31 && airquality[4]>90]
airquality[4]>90
s = airquality[airquality[1]>31 && airquality[4]>90]
airquality[1]>31 && airquality[4]>90
airquality[1]>31 || airquality[4]>90
airquality[1]>31
s = airquality[airquality[1]>31]
s
s = airquality[airquality[4]>90]
s
s = airquality[!is.na(airqualty)]
s = airquality[!is.na(airquality)]
s
s = airquality[airquality[1]>31,]
s
s = airquality[airquality[4]>90,]
s
s = airquality[!is.na(airquality)]
s
s = airquality[!is.na(airquality),]
s
s = airquality[airquality[1]>31,]
s = s[s[4]>90,]
s
s[!is.na(s)]
s[!is.na(s),]
s[is.na(s),]
complete.cases(s)
good = complete.cases(s)
s[good]
s[good,]
s = s[good, ]
mean(s[2])
mean(is.double(s[2])
)
mean(is.double(s[2]))
s
s[2]
solor = as.double(s[2])
solar = (s[2])
mean(solar)
mean(as.numeric(solar))
mean(as.double(solar))
sum(as.double(solar))
sum(as.numeric(solar))
sum(as.numeric(solar))
sum((solar))
sum(solar)/solar[,]
sum(solar)/solar[1,]
sum(solar)/solar[,1]
sum(solar)/sum(solar[,])
sum(solar[,1])
sum(solar[1,])
sum(solar[,])
sum(solar[])
sum(s[2])
sum(s[2,1])
sum(s[2,])
sum(s[. 2])
sum(s[, 2])
s = airquality[5, ==6]
s = airquality[5] == 6
s
s = airquality[5, ] == 6
s
s = airquality[, 5] == 6
s
s = airquality[airquality[5]==6,]
s
mean(s[4])
mean(is.numeric(s[4]))
sum(s[4])
sum(s[4])/30
s = airquality[airquality[5],]
s = airquality[airquality[5]==5,]
max[s[1]]
max(s[1])
max(is.numeric(s[1])
)
max(is.numeric(s[[1]]))
max(s[[1]])
s[[1]]
max(s[!is.na(s[[1]]))
max(s[!is.na(s[[1]])
)
max(s[!is.na(s[[1]])])
max(s[!is.na(s[1])])
s[!is.na(s[1])]
mean(s[!is.na(s[1])])
mean(is.double(s[!is.na(s[1])])
)
is.double(s[!is.na(s[1])])
is.double(s[!is.na(s[[1]])])
is.numeric(s[!is.na(s[1])])
(s[!is.na(s[1])])
class((s[!is.na(s[1])]))
mean((s[!is.na(s[1])]))
mean.list((s[!is.na(s[1])]))
mean.list((s[!is.na(s[1,1])]))
mean((s[!is.na(s[1,1])]))
mean((as.doubles[!is.na(s[1])]))
mean((as.doubles([!is.na(s[1])]))
mean((as.doubles([!is.na(s[1]))])
mean(as.doubles([!is.na(s[1]))])
mean(as.doubles([!is.na(s[1])])
mean(as.doubles([!is.na(s[1])]))
mean(as.doubles(s[!is.na(s[1])]))
mean(as.double(s[!is.na(s[1])]))
as.double(s[!is.na(s[1])])
mean((s[!is.na(s$Ozone)]))
mean((s[!is.na(s)]))
max((s[!is.na(s)]))
s = airquality[airquality[5]==5,]
s
max((s$Ozone[!is.na(s$Ozone)]))
xyplot
xyplot(3,2)
plot(1,2,3)
plot(1,24)
?par
library("datasets", lib.loc="D:/Programs/Programming/Languages/R-3.1.1/library")
plot(1,24, pch="a")
plot(c(1:5), rnorm(5), pch="a")
plot(c(1:100), sin(100), pch="a")
plot(c(1:100), sin(1), pch="a")
plot(x=c(1:100), sin(x), pch="a")
plot(x=c(1:100), rnorm(x), pch="+")
plot(x=c(1:100), rnorm(100), pch="+")
plot(x=c(1:100), rnorm(100), pch="#")
plot(x=c(1:100), rnorm(100), pch="o")
plot(x=c(1:100), rnorm(100), pch="/o")
plot(x=c(1:100), rnorm(100), pch="/n")
plot(x=c(1:100), rnorm(100), pch="//")
plot(x=c(1:100), rnorm(100), pch="///")
plot(x=c(1:100), rnorm(100), pch="//]")
plot(x=c(1:100), rnorm(100), pch="[]")
plot(x=c(1:100), rnorm(100), pch="")
plot(x=c(1:100), rnorm(100), pch="5")
?par
par()
par(col = red)
par(col = "red")
plot(x=c(1:100), rnorm(100), pch="5")
plot(x=c(1:100), rnorm(100), pch="5", bg = "blue")
par(bg = "blue")
plot(x=c(1:100), rnorm(100), pch="5", bg = "blue")
par(bg = "white")
par(col = "black")
plot(x=c(1:100), rnorm(100), pch="5", bg = "blue")
lines(x)
lines(c(1:100))
lines(c(50:45))
lines(c(50:100))
lines(c(-50:100))
lines(3, 4)
with(airq)
with(airquality, plot(Wind, Ozone))
with(subset(airquality, Month ==5), plot(Wind, Ozone) col = "blue")
with(subset(airquality, Month ==5), points(Wind, Ozone) col = "blue")
with(subset(airquality, Month ==5), points(Wind, Ozone, col = "blue")
)
with(airquality, {plot(Wind, Ozone), plot(Month, Wind)})
with(airquality, {plot(Wind, Ozone) plot(Month, Wind)})
with(airquality, {plot(Wind, Ozone)
plot(Month, Wind)
}
)
with(airquality, {
plot(Wind, Ozone)
plot(Month, Wind)
}
)
with(subset(airquality, Month ==5), points(Wind, Ozone) col = "blue")
with(subset(airquality, Month ==5), points(Wind, Ozone, col = "blue")
)
with(subset(airquality, Month ==5), points(Wind, Ozone, col = "blue"))
with(subset(airquality, Month ==5), points(Wind, Ozone, col = "blue"))
plot.new
with(subset(airquality, Month ==5), points(Wind, Ozone, col = "blue"))
before.plot.new
before.plot.new()
library("Rcpp", lib.loc="D:/Programs/Programming/Languages/R-3.1.1/library")
int x = 0
library("ggplot2", lib.loc="D:/Programs/Programming/Languages/R-3.1.1/library")
qplot(2,3)
plot(Month, Wind)
plot(x=c(1:100), rnorm(100), pch="5", bg = "blue")
plot(x=c(1:100), rnorm(100), pch=12)
plot(x=c(1:100), rnorm(100), pch=25)
plot(x=c(1:100), rnorm(100), pch=17)
plot(x=c(1:100), rnorm(100), pch=10)
plot(x=c(1:100), rnorm(100), pch=10, col = 3)
plot(x=c(1:100), rnorm(100), pch=10, col = 3, bg = red4)
plot(x=c(1:100), rnorm(100), pch=10, col = 3, bg = 4)
plot(x=c(1:100), rnorm(100), pch=20)
title("wow")
legend("topright", legend="Data")
fit <- lm(x~y)
x = rnorm(1000)
y = rnorm(1000)
fit <- lm(x~y)
plot(x, y)
abline(fit)
abline(fit, lwd=4)
abline(fit, lwd=3)
abline(fit, lwd=3, blue)
abline(fit, lwd=3, col =blue)
abline(fit, lwd=3, col ="blue")
pdf("m.pdf")
plot(x, y)
dev.off()
ls
ls()
cd "D:/Dropbox/Projects/Coursera/Exploratory-Data-Analysis"
cd D:/Dropbox/Projects/Coursera/Exploratory-Data-Analysis
cd
data_full <- read.csv("./Data/household_power_consumption.txt", header=T, sep=';', na.strings="?",
nrows=2075259, check.names=F, stringsAsFactors=F, comment.char="", quote='\"')
data_full$Date <- as.Date(data_full$Date, format="%d/%m/%Y")
.
./
)
getwd()
setwd("D:/Dropbox/Projects/Coursera/Exploratory-Data-Analysis")
getwd
getwd()
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
data =subset(data_full, subset=(Date >= "2007-02-01" & Date <= "2007-02-02"))
data
data$Date
data$Datetime
data$time
data$Time
data$Datetime = as.POSIXct(paste(as.Date(data$Date), data$Time))
data$Datetime
attributes(data)
hist(data$Global_active_power)
hist(data$Global_active_power, xlab = "Global Active Power (kilowatts)", color="red")
hist(data$Global_active_power, xlab = "Global Active Power (kilowatts)", col="red")
hist(data$Global_active_power, xlab = "Global Active Power (kilowatts)", col="red")
hist(data$Global_active_power, xlab = "Global Active Power (kilowatts)", col="red", main = "Global Active Power")
dev.copy(png, file = "plot1.png", height=640, width=480)
dev.off()
source('~/.active-rstudio-document')
source('D:/Dropbox/Projects/Coursera/Exploratory-Data-Analysis/plot1.R')
plot(data$Global_active_power~data$Datetime)
plot(data$Global_active_power~data$Datetime, type ='1')
plot(data$Global_active_power~data$Datetime, type =1"")
plot(data$Global_active_power~data$Datetime, type ="1")
plot(data$Global_active_power~data$Datetime, type =1)
plot
plot(data$Global_active_power~data$Datetime, type="l",
ylab="Global Active Power (kilowatts)", xlab="")
)
plot(data$Global_active_power~data$Datetime, type="l")
plot(data$Global_active_power~data$Datetime, type="g")
plot(data$Global_active_power~data$Datetime, type="p")
plot(data$Global_active_power~data$Datetime, type="o")
plot(data$Global_active_power~data$Datetime, type="l")
plot(data$Global_active_power~data$Datetime, type="i")
plot(data$Global_active_power~data$Datetime, type="m")
plot(data$Global_active_power~data$Datetime, type="e")
plot(data$Global_active_power~data$Datetime, type="c")
plot(data$Global_active_power~data$Datetime, type="l")
plot(data$Global_active_power~data$Datetime, type="l", ylab="Global Active Power (kilowatts)", xlab="")
dev.copy(png, file="plot2.png", hieght = 640, width = 480)
dev.off()
dev.copy(png, file="plot2.png", height = 640, width = 480)
dev.off()
plot(data$Global_active_power~data$Datetime, type="l", ylab="Global Active Power (kilowatts)", xlab="")
dev.copy(png, file="plot2.png", height = 640, width = 480)
dev.off()
with(data, {
plot(Sub_metering_1~Datetime, type="l", ylab="Global Active Power (kilowatts)", xlab="")
lines(Sub_metering_2~Datetime,col='Red')
lines(Sub_metering_3~Datetime,col='Blue')
})
legend("topright", col=c("black", "red", "blue", legend=c("Sub_metering_1", "Sub_metering_2", "Sub_metering_3"))
)
legend("topright", col=c("black", "red", "blue"), legend=c("Sub_metering_1", "Sub_metering_2", "Sub_metering_3"))
legend("topright", col=c("black", "red", "blue"), legend=c("Sub_metering_1", "Sub_metering_2", "Sub_metering_3"), lwd =1, lty=2)
legend("topright", col=c("black", "red", "blue"), legend=c("Sub_metering_1", "Sub_metering_2", "Sub_metering_3"), lwd =2, lty=1)
dev.copy(png, file="plot3.png", hieght=640, width=480)
dev.off()
with(data, {
legend("topright", col=c("black", "red", "blue", legend=c("Sub_metering_1", "Sub_metering_2", "Sub_metering_3"))
}
)
with(data, {
+ plot(Sub_metering_1~Datetime, type="l", ylab="Global Active Power (kilowatts)", xlab="")
+ lines(Sub_metering_2~Datetime,col='Red')
+ lines(Sub_metering_3~Datetime,col='Blue')
+ })
legend("topright", col=c("black", "red", "blue"),
legend=c("Sub_metering_1", "Sub_metering_2", "Sub_metering_3"), lwd =2, lty=1)
with(data, {
+ plot(Sub_metering_1~Datetime, type="l", ylab="Global Active Power (kilowatts)", xlab="")
+ lines(Sub_metering_2~Datetime,col='Red')
+ lines(Sub_metering_3~Datetime,col='Blue')
+ })
with(data, {
plot(Sub_metering_1~Datetime, type="l", ylab="Global Active Power (kilowatts)", xlab="")
lines(Sub_metering_2~Datetime,col='Red')
lines(Sub_metering_3~Datetime,col='Blue')
})
legend("topright", col=c("black", "red", "blue"),
legend=c("Sub_metering_1", "Sub_metering_2", "Sub_metering_3"), lwd =2, lty=1)
dev.copy(png, file="plot3.png", height=640, width=480)
dev.off()
dev.copy(png, file="plot3.png", height=480, width=640)
dev.off()
plot(data$Global_active_power~data$Datetime, type="l", ylab="Global Active Power (kilowatts)", xlab="")
dev.copy(png, file="plot2.png", height = 480, width = 640)
dev.off()
hist(data$Global_active_power, xlab = "Global Active Power (kilowatts)", col="red", main = "Global Active Power")
dev.copy(png, file = "plot1.png", height=480, width=640)
dev.off()
par(mfrow=c(2,2), mar=c(4,4,2,1), oma=c(0,0,2,0))
with(data, {
plot(Global_active_power~Datetime, type="l",
ylab="Global Active Power (kilowatts)", xlab="")
plot(Voltage~Datetime, type="l",
ylab="Voltage (volt)", xlab="")
plot(Sub_metering_1~Datetime, type="l",
ylab="Global Active Power (kilowatts)", xlab="")
lines(Sub_metering_2~Datetime,col='Red')
lines(Sub_metering_3~Datetime,col='Blue')
legend("topright", col=c("black", "red", "blue"), lty=1, lwd=2, bty="n",
legend=c("Sub_metering_1", "Sub_metering_2", "Sub_metering_3"))
plot(Global_reactive_power~Datetime, type="l",
ylab="Global Rective Power (kilowatts)",xlab="")
})
dev.copy(png, file="plot4.png", height=480, width=640)
dev.off()
